#!/bin/bash
clear

# Verificação se o usuário é root
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- Você precisa executar como root\033[0m"
    rm -f $HOME/Plus > /dev/null 2>&1
    exit 0
fi

# Função de barra de progresso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm -f $HOME/fim
        ${comando[0]} -y > /dev/null 2>&1
        ${comando[1]} -y > /dev/null 2>&1
        touch $HOME/fim
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm -f $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK! \033[1;37m"
    tput cnorm
}

# Verificação de chave
function verif_key() {
    if [[ ! -e "$_Ink/list" ]]; then
        echo -e "\n\033[1;31mFILE LIST INVÁLIDA!\033[0m"
        rm -rf $HOME/Plus > /dev/null 2>&1
        sleep 2
        clear
        exit 1
    fi
}

# Interface de boas-vindas
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
tput setaf 7; tput setab 4; tput bold; printf '%40s%s%-12s\n' "BEM VINDO AO INFINITENET-PLUS MANAGER"; tput sgr0
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
echo ""
echo -e "             \033[1;31mATENÇÃO! \033[1;33mESSE SCRIPT INSTALARÁ FERRAMENTAS PARA O GERENCIAMENTO DE REDE, SISTEMA E USUÁRIOS\033[0m"
echo ""

# Confirmação do usuário para continuar
read -p "$(echo -e "\033[1;36mDESEJA CONTINUAR \033[1;31m? \033[1;33m[S/N]:\033[1;37m ")" -e -i s resp
[[ $resp = @(n|N) ]] && rm -f $HOME/Plus && exit 0

# Atualização do sistema e instalação de pacotes
echo -e "\n\033[1;36mVERIFICANDO... \033[1;37m Listando pacotes\033[0m"
fun_attlist() {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir -p /usr/share/.plus
    echo "INFINITENET-PLUS: $(date)" > /usr/share/.plus/.plus
}
fun_bar 'fun_attlist'

echo -e "\n\033[1;32mATUALIZAÇÃO DO SISTEMA CONCLUÍDA!\033[1;32m"
sleep 1

# Instalação de pacotes essenciais
echo -e "\033[1;33mINSTALANDO PACOTES NECESSÁRIOS...\033[0m"
inst_pct() {
    _pacotes=("bc" "screen" "nano" "unzip" "lsof" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip")
    for _prog in ${_pacotes[@]}; do
        apt install $_prog -y
    done
    pip install speedtest-cli
}
fun_bar 'inst_pct'

# Configuração do Firewall (UFW)
if [[ -f "/usr/sbin/ufw" ]]; then
    ufw allow 443/tcp
    ufw allow 80/tcp
    ufw allow 3128/tcp
    ufw allow 8799/tcp
    ufw allow 8080/tcp
fi

# Links atualizados do seu repositório
_lnk=$(echo 't1:e#n.5s0ul&p4hs$s.0729t9p$&8i&&9r7827c032:3s' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')

# Baixando arquivos do seu novo repositório
wget -P $_Ink https://github.com/InfiniteNet/INFINITENET-PLUS/raw/master/Install/list > /dev/null 2>&1
verif_key

# Finalização do script
echo -e "\033[1;33mFINALIZANDO INSTALAÇÃO...\033[0m"
echo -e "\033[1;32mINSTALAÇÃO CONCLUÍDA COM SUCESSO!\033[0m"
